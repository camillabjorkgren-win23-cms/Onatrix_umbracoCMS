@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem<FormBlocklist>>;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;

@{
    var formBlocks = Model?.Content.Value<IEnumerable<Umbraco.Cms.Core.Models.Blocks.BlockListItem>>("form");

    var id = Model?.Content.Value<string>("uniqueName");
    var headline = Model?.Content.Value<string>("headlineText");
    var preamble = Model?.Content.Value<string>("preamble");
}

<div class="form-content" id="@id">
    <div class="headline">
        <h3>@headline</h3>
    </div>
    @if (preamble != null)
    {
        <div class="preamble">
            <p>@preamble</p>
        </div>
    }



    @if (formBlocks != null && formBlocks.Any())
    {
        @if (TempData["success"] != null)
        {
            <div class="success-message">@TempData["Success"]</div>
        }
        else
        {
            @using (Html.BeginUmbracoForm("HandleSubmit", "ContactSurface", FormMethod.Post))
            {
                <div class="form">
                    @foreach (var block in formBlocks)
                    {
                        var blockType = block.Content.ContentType.Alias;

                        var uniqueName = block.Content.Value<string>("uniqueName");
                        var labelText = block.Content.Value<string>("labelText");
                        var placeholderText = block.Content.Value<string>("placeholderText");
                        var inputType = block.Content.Value<string>("inputType");
                        var isRequired = block.Content.Value<bool>("isRequired");
                        var errorMessage = block.Content.Value<string>("errorMessage");
                        var buttonLinkColor = block.Content?.Value<ColorPickerValueConverter.PickedColor>("buttonColor")?.Label.ToLower() ?? null;

                        var buttonText = block.Content.Value<string>("buttonText");
                        var buttonType = block.Content.Value<string>("buttonType");

                        var subjects = block.Content.Value<IEnumerable<string>>("subjects");


                        switch (blockType)
                        {
                            case "inputText":
                                <div id="_@uniqueName" class="form-input-group">
                                    <input id="@uniqueName" name="@uniqueName" type="@inputType" placeholder="@placeholderText" value="@ViewData[uniqueName]" class="form-control" @(isRequired ? "required" : "")>

                                    @if (isRequired)
                                    {
                                        <span class="form-input-error">@errorMessage</span>
                                    }
                                </div>
                                break;

                            case "inputPassword":
                                <div id="_@uniqueName" class="form-input-group">
                                    <input id="@uniqueName" name="@uniqueName" type="@inputType" placeholder="@placeholderText" value="@ViewData[uniqueName]" class="form-control" @(isRequired ? "required" : "")>

                                    @if (isRequired)
                                    {
                                        <span class="form-input-error">@errorMessage</span>
                                    }
                                </div>
                                break;

                            case "inputTextArea":
                                <div id="_@uniqueName" class="form-input-group">
                                    <textarea id="@uniqueName" name="@uniqueName" placeholder="@placeholderText" class="form-control" @(isRequired ? "required" : "")>@ViewData[uniqueName]</textarea>

                                    @if (isRequired)
                                    {
                                        <span class="form-input-error">@errorMessage</span>
                                    }
                                </div>
                                break;

                            case "formButton":
                                <div id="_@buttonText" class="form-input-group">
                                    <button type="@buttonType" class="form-button btn btn-@buttonLinkColor">@buttonText</button>
                                </div>
                                break;

                            case "subjectList":
                                <div class="form-group">
                                    <select name="subject" class="form-select" id="@uniqueName" required>
                                        @if (subjects != null)
                                        {
                                            int index = 0;
                                            foreach (var subject in subjects)
                                            {
                                                if (index == 0)
                                                {
                                                    <option value="@subject" selected>@subject</option>
                                                }
                                                else
                                                {
                                                    <option value="@subject">@subject</option>
                                                }
                                                index++;
                                            }
                                        }
                                        else
                                        {
                                            <option value="">No subjects available</option>
                                        }
                                    </select>

                                    @if (!string.IsNullOrEmpty(errorMessage))
                                    {
                                        <span class="form-select-error">@errorMessage</span>
                                    }
                                </div>
                                break;

                            default:
                                <p>Unknown block type: @blockType</p>
                                break;
                        }
                    }
                </div>
            }
        }
    }
    else
    {
        <p>No form fields available</p>
    }
</div>
