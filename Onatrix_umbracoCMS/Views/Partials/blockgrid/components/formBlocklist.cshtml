@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem<FormBlocklist>>;
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;

@{
    var formBlocks = Model?.Content.Value<IEnumerable<Umbraco.Cms.Core.Models.Blocks.BlockListItem>>("form");
}

@if (formBlocks != null && formBlocks.Any())
{
    <form onsubmit="handleContactFormSubmit(event)" novalidate>
        @foreach (var block in formBlocks)
        {
            var blockType = block.Content.ContentType.Alias;
                   
            var uniqueName = block.Content.Value<string>("uniqueName");
            var labelText = block.Content.Value<string>("labelText");
            var placeholderText = block.Content.Value<string>("placeholderText");
            var inputType = block.Content.Value<string>("inputType");
            var isRequired = block.Content.Value<bool>("isRequired");
            var errorMessage = block.Content.Value<string>("errorMessage");

            var buttonText = block.Content.Value<string>("buttonText");
            var buttonType = block.Content.Value<string>("buttonType");
     
            var subjects = block.Content.Value<IEnumerable<string>>("subjects");
            
            
            switch (blockType)
            {
                case "inputText":                   
                    <div id="_@uniqueName" class="form-input-group">
                        <label class="form-label" for="@uniqueName">@labelText</label>
                        <input id="@uniqueName" name="@uniqueName" type="@inputType" placeholder="@placeholderText" value="@ViewData[uniqueName]" class="form-input" @(isRequired ? "required" : "")>

                        @if (isRequired)
                        {
                            <span class="form-input-error">@errorMessage</span>
                        }
                    </div>
                    break;

                case "inputPassword":
                    <div id="_@uniqueName" class="form-input-group">
                        <label class="form-label" for="@uniqueName">@labelText</label>
                        <input id="@uniqueName" name="@uniqueName" type="@inputType" placeholder="@placeholderText" value="@ViewData[uniqueName]" class="form-input" @(isRequired ? "required" : "")>

                        @if (isRequired)
                        {
                            <span class="form-input-error">@errorMessage</span>
                        }
                    </div>
                    break;

                case "inputTextArea":
                    <div id="_@uniqueName" class="form-input-group">
                        <label class="form-label" for="@uniqueName">@labelText</label>
                        <textarea id="@uniqueName" name="@uniqueName" placeholder="@placeholderText" class="form-textarea" @(isRequired ? "required" : "")>@ViewData[uniqueName]</textarea>

                        @if (isRequired)
                        {
                            <span class="form-input-error">@errorMessage</span>
                        }
                    </div>
                    break;

                case "formButton":
                    <div id="_@buttonText" class="form-input-group">
                        <button type="@buttonType" class="form-button btn-submit">@buttonText</button>
                    </div>
                    break;

                case "subjectList":
                    <div class="form-group">
                        <select name="subject" class="form-select" id="@uniqueName" required>
                            @if (subjects != null)
                            {
                                int index = 0;
                                foreach (var subject in subjects)
                                {
                                    if (index == 0)
                                    {
                                        <option value="@subject" selected>@subject</option>
                                    }
                                    else
                                    {
                                        <option value="@subject">@subject</option>
                                    }
                                    index++;
                                }
                            }
                            else
                            {
                                <option value="">No subjects available</option>
                            }
                        </select>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <span class="form-select-error">@errorMessage</span>
                        }
                    </div>
                    break;

                default:
                    <p>Unknown block type: @blockType</p>
                    break;
            }
        }
    </form>
}
else
{
    <p>No form fields available</p>
}
